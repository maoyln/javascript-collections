// 1. 对闭包的理解
// 闭包是指有权访问另一个函数作用域中变量的函数，创建闭包的最常见的方式就是在一个函数内创建另一个函数，创建的函数可以访问到当前函数的局部变量。

// 闭包是指那些能够访问自由变量的函数 这是MDN的最新定义

// 闭包有两个常用的用途；
// ● 闭包的第一个用途是使我们在函数外部能够访问到函数内部的变量。通过使用闭包，可以通过在外部调用闭包函数，从而在外部访问到函数内部的变量，可以使用这种方法来创建私有变量。
// ● 闭包的另一个用途是使已经运行结束的函数上下文中的变量对象继续留在内存中，因为闭包函数保留了这个变量对象的引用，所以这个变量对象不会被回收。

// 比如，函数 A 内部有一个函数 B，函数 B 可以访问到函数 A 中的变量，那么函数 B 就是闭包。

function A() {
  let a = 1;
  B = function () {
    console.log(a)
  }
}
A()
B() // 1

console.log('--------------------------------------华丽分割线--------------------------------------');

// 在 JS 中，闭包存在的意义就是让我们可以间接访问函数内部的变量。经典面试题：循环中使用闭包解决 var 定义函数的问题

function closure() {
  for( var i = 0; i < 5; i++) {
    setTimeout(() => {
      console.log(i);
    }, 1000)

  }
}

closure(); // 5 5 5 5 5

console.log('--------------------------------------华丽分割线--------------------------------------');

// 使用闭包的方式
function closure1() {
  for( var i = 0; i < 5; i++) {
    (function(i) {
      setTimeout(() => {
        console.log(i);
      }, 1000)
    })(i)

  }
}

// closure1(); // 0 1 2 3 4

console.log('--------------------------------------华丽分割线--------------------------------------');



// 使用 setTimeout 的第三个参数
function closure2() {
  for( let i = 0; i < 5; i++) {
    setTimeout(() => {
      console.log(i);
    }, 1000, i)

  }
}

closure2(); // 0 1 2 3 4


// 使用 let 定义 i 了来解决问题了，这个也是最为推荐的方式
function closure3() {
  for( let i = 0; i < 5; i++) {
    setTimeout(() => {
      console.log(i);
    }, 1000)

  }
}

// closure3(); // 0 1 2 3 4

console.log('--------------------------------------华丽分割线--------------------------------------');
